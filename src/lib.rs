//! Submodule providing the `Tabular` trait which represents metadata
//! associated to structs that are stored in a tabular format.

use core::error::Error;

/// Trait representing metadata associated to structs that are stored in a tabular format.
pub trait Tabular {
    type FromClause: Send + Sync;
    /// Type of the table associated to the struct.
    type Table: diesel::Table<FromClause = <Self as Tabular>::FromClause>
        + Send
        + Sync
        + diesel::query_builder::QueryId;
    /// Table associated to the struct.
    const TABLE: Self::Table;
    /// Struct representing a row in the table.
    type Row: Send
        + Sync
        + diesel::Selectable<diesel::pg::Pg>
        + diesel::SelectableHelper<diesel::pg::Pg>
        + diesel::QueryableByName<diesel::pg::Pg>;
    /// Name of the table.
    const TABLE_NAME: &'static str;
}

/// Trait representing an object that can be inserted into a table.
pub trait Insertable:
    Tabular
    + diesel::IntoSql
    + diesel::Insertable<<Self as Tabular>::Table, Values = <Self as Insertable>::Values>
    + diesel::query_builder::UndecoratedInsertRecord<<Self as Tabular>::Table>
{
    type Values: Send + Sync;
}

/// Trait defining an interface for connections.
pub trait Connection: Sized {
    /// Error that may be generated by the connection.
    type Error: Error;

    /// Define a method to insert a new row into the database.
    fn insert<I: Insertable>(
        &mut self,
        operation: I,
    ) -> impl std::future::Future<Output = Result<<I as Tabular>::Row, Self::Error>> + Send
    where
        I: diesel_async::RunQueryDsl<Self>;
}

diesel::table! {
    /// Small table example for testing purpouses
    geography_columns (id) {
        id -> Integer,
        f_table_catalog -> Text,
        f_table_schema -> Text,
        f_table_name -> Text,
    }
}

#[derive(
    diesel::Queryable,
    diesel::QueryableByName,
    PartialEq,
    Eq,
    diesel::Selectable,
    Debug,
    Clone,
    Hash,
)]
#[diesel(table_name = geography_columns)]
pub struct GeographyColumn {
    id: i32,
    f_table_catalog: String,
    f_table_schema: String,
    f_table_name: String,
}

impl Tabular for GeographyColumn {
    type FromClause = <<Self as Tabular>::Table as diesel::QuerySource>::FromClause;
    type Table = geography_columns::table;
    const TABLE: Self::Table = geography_columns::table;
    type Row = Self;
    const TABLE_NAME: &'static str = "geography_columns";
}

#[derive(PartialEq, Eq, diesel::prelude::Insertable, Debug, Clone, Hash)]
#[diesel(table_name = geography_columns)]
pub struct InsertableGeographyColumn {
    f_table_catalog: String,
    f_table_schema: String,
    f_table_name: String,
}

impl Tabular for InsertableGeographyColumn {
    type FromClause = <<Self as Tabular>::Table as diesel::QuerySource>::FromClause;
    type Table = geography_columns::table;
    const TABLE: Self::Table = geography_columns::table;
    type Row = GeographyColumn;
    const TABLE_NAME: &'static str = "geography_columns";
}

impl InsertableGeographyColumn {
    pub async fn insert_geography_column(
        self,
        connection: &mut diesel_async::AsyncPgConnection,
    ) -> Result<<Self as Tabular>::Row, diesel::result::Error> {
        use diesel_async::RunQueryDsl;
        diesel::insert_into(geography_columns::table)
            .values(self)
            .get_result(connection)
            .await
    }
}

impl Connection for diesel_async::AsyncPgConnection {
    type Error = diesel::result::Error;

    async fn insert<I: Insertable>(
        &mut self,
        operation: I,
    ) -> Result<<I as Tabular>::Row, Self::Error>
    where
        I: diesel_async::RunQueryDsl<Self>,
    {
        use diesel_async::RunQueryDsl;
        diesel::insert_into(I::TABLE)
            .values(operation)
            .get_result(self)
            .await
    }
}
